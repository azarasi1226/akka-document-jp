# Akkaが提供する主な機能

## Actor
Akka のコアライブラリは akka-actor-typed ですが、アクタは Akka ライブラリ全体で使用され、一貫した統合モデルを提供し、並行処理や分散システムの設計で発生する課題を個別に解決することから解放されます。俯瞰してみると、アクターは、OOP の柱の一つであるカプセル化を極限まで追求したプログラミングパラダイムと言えます。オブジェクトとは異なり、アクタは状態だけでなく実行もカプセル化する。アクターとのコミュニケーションは、メソッド呼び出しではなく、メッセージの受け渡しによって行われます。この違いは些細なことに思えるかもしれませんが、実はこれによって、並行処理や遠隔通信に関して、OOPの制限から解放されることになるのです。この説明ではレベルが高すぎてよくわからないという方もいるかもしれませんが、次章でアクターについて詳しく説明します。今のところ、重要な点は、OOP にこれらの機能を導入するためにアドホックなパッチを適用するのではなく、基本的なレベルで並行性と分散を処理するモデルであることです。

アクターが解決する課題には次のようなものがある。

高性能な並行アプリケーションをどのように構築し設計するか。
マルチスレッド環境でどのようにエラーを処理するか。
並行処理の落とし穴から自分のプロジェクトを守るにはどうしたらよいか。

## Remoting
Remotingは、異なるコンピュータに住んでいるアクターがシームレスにメッセージを交換することを可能にします。JARアーティファクトとして配布されていますが、Remotingはライブラリというよりもモジュールに似ています。ほとんどの場合、設定によって有効にすることができ、APIもわずかなものしか持っていません。アクターモデルのおかげで、リモートとローカルのメッセージ送信は全く同じに見えます。ローカルシステムで使用しているパターンがそのままリモートシステムにも反映されます。Remotingを直接使う必要はほとんどありませんが、Clusterサブシステムを構築するための土台を提供します。


## Cluster
ビジネス上の問題を解決するために協力し合うアクターシステムのセットがある場合、これらのシステムのセットを統制のとれた方法で管理したいと思うことでしょう。Remoting がリモートシステムのコンポーネントのアドレス指定や通信の問題を解決するのに対して、Clustering はこれらをメンバーシッププロトコルで結びつけた "メタシステム" として組織化する能力を提供します。ほとんどの場合、Remoting を直接使用する代わりに Cluster モジュールを使用することになります。クラスタリングは、ほとんどの実世界のアプリケーションが必要とする Remoting の上に、追加のサービスセットを提供します。

Cluster モジュールが解決する課題には次のようなものがあります。

互いに通信可能で、互いをクラスタの一部とみなすことができるアクターシステムの集合(クラスタ)をどのように維持するか。
すでに存在するメンバーの集合に新しいシステムを安全に導入する方法。
一時的に到達不能になったシステムを確実に検出する方法。
残りのメンバー全員がクラスタの残りの部分集合に同意するように、故障したホスト/システムを削除する（あるいはシステムを縮小する）方法。
現在のメンバー間で計算を分散させる方法。
クラスタのメンバーを特定の役割に指定する方法、言い換えれば、特定のサービスを提供し、他のサービスを提供しないように指定する方法。


## Cluster Sharding
Sharding は、Akka クラスタのメンバー間でアクターのセットを分散させる問題を解決するのに役立ちます。Sharding は、主に Persistence と一緒に使用されるパターンで、（アクターに支えられた）永続的なエンティティの大きなセットをクラスタのメンバーにバランスよく配置し、メンバーがクラッシュしたり離脱したときにそれらを他のノードにマイグレートすることができます。

Sharding が解決する課題には、次のようなものがあります。

ステートフルなエンティティの大規模なセットを、どのようにモデル化し、システムのセットでスケールアウトするか。
クラスタ内のエンティティが適切に分散され、マシン間で負荷が適切にバランスされるようにするにはどうすればよいか。
クラッシュしたシステムから、状態を失うことなくエンティティを確実にマイグレーションする方法。
エンティティが複数のシステム上に同時に存在しないようにし、その結果、一貫性を保つようにする方法。

## Cluster Singleton
分散システムでよくある（というか、ありがちすぎる）ユースケースは、あるタスクを担当するエンティティを1つ持ち、それをクラスタの他のメンバーで共有し、ホストシステムに障害が発生したらマイグレートする、というものです。これはクラスタ全体に共通のボトルネックをもたらし、スケーリングを制限することは否めませんが、このパターンの使用が避けられないシナリオもあります。クラスタ・シングルトンは、クラスタが特定のアクターをホストするアクター・システムを選択できるようにする一方で、他のシステムは常にどこからでも独立して当該サービスにアクセスすることができるようにします。

## Persistence
OOP のオブジェクトと同じように、アクターはその状態を揮発性メモリに保持します。システムがシャットダウンされると、優雅に、あるいはクラッシュのために、メモリ内にあったすべてのデータが失われます。Persistenceは、アクターが現在の状態に至るイベントを永続化するためのパターンを提供します。起動時にイベントを再生して、アクターがホストしているエンティティの状態を復元することができます。イベントストリームを照会して、追加の処理パイプライン（たとえば外部のビッグデータクラスター）や代替ビュー（レポートなど）に供給することができます。

永続性は、以下の課題に取り組みます。

システムの再起動やクラッシュ時に、エンティティやアクターの状態をどのように復元するか。
CQRSシステムをどのように実装するか。
ネットワークエラーやシステムクラッシュに直面したときに、メッセージの信頼性の高い配信を確保する方法。
エンティティを現在の状態に導いたドメインイベントをイントロスペクトする方法。
プロジェクトが進化し続ける中で、長期間のプロセスをサポートするために、アプリケーションでイベントソーシングを活用する方法。

## Distributed Data
最終的な一貫性が許容される状況では、Akka Cluster のノード間でデータを共有し、クラスタ分割があっても読み込みと書き込みの両方を受け入れることが可能です。これは、Conflict Free Replicated Data Types (CRDT) を使用することで実現可能で、異なるノードでの書き込みが同時に発生し、その後予測可能な方法でマージされます。Distributed Dataモジュールは、データを共有するためのインフラと、多くの有用なデータ型を提供します。

Distributed Dataは以下のような課題を解決することを目的としています。

クラスタパーティションに直面しても書き込みを受け入れる方法。
データを共有すると同時に、低レイテンシでローカルな読み取りと書き込みのアクセスを確保する方法。


## Steram
アクターは並行処理のための基本的なモデルですが、その使用には、ユーザーが同じパターンを何度も実装する必要がある一般的なパターンが存在します。非常に一般的なのは、アクターのチェーンやグラフが、潜在的に大きな、あるいは無限の連続したイベントのストリームを処理し、チェーンやグラフ内の速い処理ステージが遅いステージを圧倒しないように、リソースの使用を適切に調整する必要があるというシナリオである。ストリームはアクターの上位に位置する抽象化機能で，このような処理ネットワークの記述を簡素化し，バックグラウンドですべての細かい処理を行い，安全で型付けされた，コンパクタブルなプログラミングモデルを提供する．また，Streams は Reactive Streams 標準の実装であり，この標準のサードパーティ製実装との統合を可能にしています．

Streamsは以下のような課題を解決します。

イベントや大きなデータセットのストリームを高性能に処理し、並行性を利用し、リソースの使用量を抑える方法。
イベント/データ処理の再利用可能な部分を柔軟なパイプラインに組み立てる方法。
非同期サービス同士を柔軟な方法で接続し、高いパフォーマンスを実現する方法。
サードパーティライブラリとのインターフェースとして、Reactive Streamsに準拠したインターフェースを提供したり、利用したりする方法。

## https
Akka HTTP は、Akka とは別のモジュールです。

内部・外部を問わず、リモートでAPIを提供するためのデファクトスタンダードは、HTTPです。Akka は、HTTP サービスを作成する（そしてそれを提供する）ための一連のツールと、他のサービスを消費するために使用できるクライアントを与えることで、このような HTTP サービスを構築したり消費したりするためのライブラリを提供します。これらのツールは、Akka Streams の基本モデルを活用することで、大量のデータやリアルタイムイベントのストリーミング入出力を行うのに特に適しています。

HTTP が取り組む課題のいくつかを紹介します。